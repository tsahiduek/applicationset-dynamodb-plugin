apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  # ...
  # The secret value must be base64 encoded **once**.
  # this value corresponds to: `printf "strong-password" | base64`.
  plugin.myplugin.token: "c3Ryb25nLXBhc3N3b3Jk"
  # ...
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: applicationset-dynamodb-plugin
  namespace: argocd
data:
  token: "$plugin.myplugin.token" # Alternatively $<some_K8S_secret>:plugin.myplugin.token
  baseUrl: "http://applicationset-dynamodb-plugin-service.default.svc.cluster.local."
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: applicationset-dynamodb-plugin-test
  namespace: argocd
spec:
  generators:
    - plugin:
        # Specify the configMap where the plugin configuration is located.
        configMapRef:
          name: applicationset-dynamodb-plugin
        # You can pass arbitrary parameters to the plugin. `input.parameters` is a map, but values may be any type.
        # These parameters will also be available on the generator's output under the `generator.input.parameters` key.
        input:
          parameters:
            ddb-table-name: "TenantConfig"
        # When using a Plugin generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.
        requeueAfterSeconds: 30
  # template:
  #   metadata:
  #     name: myplugin
  #     annotations:
  #       example.from.input.parameters: "{{ generator.input.parameters.map.key1 }}"
  #       example.from.values: "{{ values.value1 }}"
  #       # The plugin determines what else it produces.
  #       example.from.plugin.output: "{{ something.from.the.plugin }}"
  template:
    metadata:
      name: '{{tenantName}}-guestbook'
    spec:
      project: default
      source:
        repoURL: https://github.com/argoproj/argo-cd.git
        targetRevision: HEAD
        # path: applicationset/examples/list-generator/guestbook/{{cluster}}
      destination:
        server: "kubernetes.svc.cluster.local"
        namespace: default